name: Deploy to Cloudflare Workers

on:
  push:
    branches: [main]
    tags: ['v*']

permissions:
  contents: write
  issues: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=latest" >> $GITHUB_OUTPUT
        fi

  request_approval:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    uses: ./.github/workflows/reusable-lark-approval.yml
    with:
      project_type: workers
      project_name: rendering-cache-proxy
      version: ${{ needs.build.outputs.version }}
      change_log: ${{ github.event.head_commit.message }}
    secrets:
      LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
      LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
      LARK_CHAT_ID: ${{ secrets.LARK_CHAT_ID }}
      APPROVAL_CALLBACK_BASE: ${{ secrets.APPROVAL_CALLBACK_BASE }}
      CALLBACK_SIGN: ${{ secrets.CALLBACK_SIGN }}

  deploy:
    needs: [build, request_approval]
    if: needs.request_approval.outputs.approved == 'true' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Check wrangler.jsonc
      run: |
        echo "📄 wrangler.jsonc:"
        cat wrangler.jsonc
    
    - name: Install dependencies
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          npm install -g pnpm
          pnpm install
        elif [ -f "package-lock.json" ]; then
          npm ci
        else
          npm install
        fi
    
    - name: Deploy to Cloudflare Workers
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      run: |
        echo "🚀 开始部署到 Cloudflare Workers..."
        echo "☁️  Worker: tk-rendering-proxy"
        
        if [ -f "pnpm-lock.yaml" ]; then
          pnpm exec wrangler deploy
        else
          npx wrangler deploy
        fi
        
        echo "✅ 部署完成"
    
    - name: Create Release
      if: success() && startsWith(github.ref, 'refs/tags/v')
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const version = '${{ needs.build.outputs.version }}';
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: 'Release ' + version,
              body: 'Production Deployment - Version: ' + version,
              draft: false,
              prerelease: false
            });
            console.log('✅ Release created');
          } catch (error) {
            console.log('Release creation skipped:', error.message);
          }

  notify-lark:
    needs: [build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send Lark Notification
        env:
          LARK_APP_ID: ${{ secrets.LARK_APP_ID }}
          LARK_APP_SECRET: ${{ secrets.LARK_APP_SECRET }}
          LARK_CHAT_ID: ${{ secrets.LARK_CHAT_ID }}
        run: |
          command -v jq >/dev/null 2>&1 || { sudo apt-get update -y >/dev/null; sudo apt-get install -y jq >/dev/null; }
          TAT=$(curl -sS -X POST 'https://open.larksuite.com/open-apis/auth/v3/tenant_access_token/internal' -H 'Content-Type: application/json; charset=utf-8' -d "{\"app_id\":\"${LARK_APP_ID}\",\"app_secret\":\"${LARK_APP_SECRET}\"}" | jq -r '.tenant_access_token')
          if [ -n "$TAT" ] && [ "$TAT" != "null" ]; then
            if [ "${{ needs.deploy.result }}" = "success" ]; then
              MSG_TEXT="[rendering-cache-proxy] ✅ Production 部署成功 - 版本: ${{ needs.build.outputs.version }} - Worker: tk-rendering-proxy"
            else
              MSG_TEXT="[rendering-cache-proxy] ❌ Production 部署失败 - 版本: ${{ needs.build.outputs.version }}"
            fi
            curl -sS -X POST 'https://open.larksuite.com/open-apis/im/v1/messages?receive_id_type=chat_id' -H "Authorization: Bearer ${TAT}" -H 'Content-Type: application/json; charset=utf-8' -d "{\"receive_id\":\"${LARK_CHAT_ID}\",\"msg_type\":\"text\",\"content\":\"{\\\"text\\\":\\\"$MSG_TEXT\\\"}\"}"
            echo "✅ 飞书通知已发送"
          fi
